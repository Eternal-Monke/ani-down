#!/usr/bin/env bash

startup() {
    clear
    echo -e "${CYAN}═════════════════════════════════════════════════════════════
   _____         .__          ________                       
  /  _  \   ____ |__|         \______ \   ______  _  ______  
 /  /_\  \ /    \|  |  ______  |    |  \ /  _ \ \/ \/ /    \ 
/    |    \   |  \  | /_____/  |    \`   (  <_> )     /   |  \\
\____|__  /___|  /__|         /_______  /\\____/ \\/\\_/|___|  /
        \\/     \\/                     \\/                  \\/ 
═════════════════════════════════════════════════════════════${RESET}"
    echo
    echo -n -e "${RED}Press Enter to start ... ${RESET}"
    read -p ""
    action
}

download_check() {
    while true
    do
        echo -n "Download? ('y' or 'n'): "
        read -r download
        download=$(echo ${download} | tr [A-Z] [a-z])
        case ${download} in
            y | yes)
                download=1
                break
                ;;
            n | no)
                download=0
                break
                ;;
            *)
                echo "Invalid input. Please enter 'y' or 'n'."
                ;;
        esac
    done
}

sub_check() {
    while true
    do
        echo -n "Sub? ('y' or 'n'): "
        read -r sub
        download=$(echo ${sub} | tr [A-Z] [a-z])
        case ${sub} in
            y | yes)
                sub=1
                break
                ;;
            n | no)
                sub=0
                break
                ;;
            *)
                echo "Invalid input. Please enter 'y' or 'n'."
                ;;
        esac
    done
}

action() {
    echo
    option=$(echo -n -e "Search info about anime\nSearch for anime character\nStream anime\nDownload anime\nAnime girl\nExit" | fzf --layout=reverse --prompt="Enter Option ('h' for help): ")
    case "$option" in
        "Search info about anime")
            anime_info
            ;;
        "Search for anime character")
            search_character
            ;;
        "Stream anime")
            stream_anime
            ;;
        "Download anime")
            download_anime
            ;;
        "Anime girl")
            waifu_pics
            ;;
        "Exit")
            echo "Goodbye!"
            exit 0
            ;;
        *)
            echo "Unknown option: $option"
            ;;
    esac
    exit 0
}

waifu_pics() {
    clear
    category=$(echo -e "waifu\nneko\nshinobu\nmegumin\nbully\ncuddle\ncry\nhug\nawoo\nkiss\nlick\npat\nsmug\nbonk\nyeet\nblush\nsmile\nwave\nhighfive\nhandhold\nnom\nbite\nglomp\nslap\nkill\nkick\nhappy\nwink\npoke\ndance\ncringe"| fzf --layout=reverse --prompt="Pick your category: ")

    while true
    do
        option=$(echo -e "Reload\nDownload\nExit" | fzf --layout=reverse --prompt="Pick an option: " --preview="curl -s https://api.waifu.pics/sfw/${category} | jq -r .url | xargs -I{} curl -s \"{}\" | viu -t -" --preview-window=right:50%:wrap)

        case "${option}" in
            Reload)
                continue
                ;;
            Download)
                break
                ;;
            Exit|"")
                break
                ;;
        esac
    done

}

stream_anime() {
    clear

    echo -n -e "${BOLD}${BLUE}Enter anime name: ${RESET}"
    read -r anime_name
    anime_name=$(echo ${anime_name} | sed -E 's/ /%20/g')

    anime_search_data=$(curl -s "https://allanime-api.up.railway.app/search?query=${anime_name}" | jq -r '.[] | [.title, .id] | @tsv')

    selected_anime=$(echo "${anime_search_data}" | cut -f1 | fzf --layout=reverse --prompt="Pick your anime: ")
    anime_id=$(echo "${anime_search_data}" | cut -f2 | fzf --layout=reverse --prompt="Pick your episode: ")

    selected_episode=$(curl -s "https://api-anime-rouge.vercel.app/aniwatch/episodes/${anime_id}")

}

anime_info() {
    clear
    echo -ne "${BLUE}Enter anime name: ${RESET}"
    read -r query
    if test -z "$query"
    then
        echo "No query entered."
        exit 1
    fi

    search_json=$(curl -s -G "https://kitsu.io/api/edge/anime" \
        --data-urlencode "filter[text]=$query" \
        --data-urlencode "page[limit]=20" \
        -H "Accept: application/vnd.api+json")

    count=$(echo "$search_json" | jq '.data | length')
    if test "$count" -eq 0
    then
        echo "No results found."
        exit 1
    fi

    titles_ids=$(echo "$search_json" | jq -r '.data[] | [.attributes.canonicalTitle, .id] | @tsv')
    selected_title=$(echo "$titles_ids" | cut -f1 | fzf --reverse --prompt="Select anime: ")

    if test -z "$selected_title"
    then
        echo "No anime selected."
        exit 1
    fi
    anime_id=$(echo "$titles_ids" | awk -F'\t' -v name="$selected_title" '$1 == name {print $2; exit}')

    anime_json=$(curl -s "https://kitsu.io/api/edge/anime/$anime_id" -H "Accept: application/vnd.api+json")

    attr='.data.attributes'
    title=$(echo "$anime_json" | jq -r "$attr.canonicalTitle // \"N/A\"")
    jp_title=$(echo "$anime_json" | jq -r "$attr.titles.ja_jp // \"N/A\"")
    en_title=$(echo "$anime_json" | jq -r "$attr.titles.en // \"N/A\"")
    synopsis=$(echo "$anime_json" | jq -r "$attr.synopsis // \"N/A\"")
    avg_rating=$(echo "$anime_json" | jq -r "$attr.averageRating // \"N/A\"")
    rating_rank=$(echo "$anime_json" | jq -r "$attr.ratingRank // \"N/A\"")
    popularity_rank=$(echo "$anime_json" | jq -r "$attr.popularityRank // \"N/A\"")
    start_date=$(echo "$anime_json" | jq -r "$attr.startDate // \"N/A\"")
    end_date=$(echo "$anime_json" | jq -r "$attr.endDate // \"N/A\"")
    status=$(echo "$anime_json" | jq -r "$attr.status // \"N/A\"")
    subtype=$(echo "$anime_json" | jq -r "$attr.subtype // \"N/A\"")
    episode_count=$(echo "$anime_json" | jq -r "$attr.episodeCount // \"N/A\"")
    episode_length=$(echo "$anime_json" | jq -r "$attr.episodeLength // \"N/A\"")
    age_rating=$(echo "$anime_json" | jq -r "$attr.ageRating // \"N/A\"")
    age_guide=$(echo "$anime_json" | jq -r "$attr.ageRatingGuide // \"N/A\"")
    nsfw=$(echo "$anime_json" | jq -r "$attr.nsfw // false")
    poster=$(echo "$anime_json" | jq -r "$attr.posterImage.original // \"N/A\"")
    cover=$(echo "$anime_json" | jq -r "$attr.coverImage.original // \"N/A\"")
    youtube=$(echo "$anime_json" | jq -r "$attr.youtubeVideoId // empty")
    youtube_url=""
    [ -n "$youtube" ] && youtube_url="https://youtube.com/watch?v=$youtube"

    # Print info in a neat format
    clear
    echo "────────────────────────────────────────────────────────────"
    echo -e "${BOLD}${CYAN}${title}${RESET}"
    echo "────────────────────────────────────────────────────────────"
    if test "$en_title" != "N/A"
    then
        echo -e "${BOLD}${BLUE}English Title   :${RESET} $en_title"
    fi
    if test "$jp_title" != "N/A"
    then
        echo -e "${BOLD}${BLUE}Japanese Title  :${RESET} $jp_title"
    fi
    echo -e "${BOLD}${BLUE}Type            :${RESET} $subtype"
    echo -e "${BOLD}${BLUE}Status          :${RESET} $status"
    echo -e "${BOLD}${BLUE}Episodes        :${RESET} $episode_count"
    echo -e "${BOLD}${BLUE}Episode Length  :${RESET} $episode_length min"
    echo -e "${BOLD}${BLUE}Airing          :${RESET} $start_date to $end_date"
    echo -e "${BOLD}${BLUE}Average Rating  :${RESET} $avg_rating"
    echo -e "${BOLD}${BLUE}Rating Rank     :${RESET} $rating_rank"
    echo -e "${BOLD}${BLUE}Popularity Rank :${RESET} $popularity_rank"
    echo -e "${BOLD}${BLUE}Age Rating      :${RESET} $age_rating ($age_guide)"
    echo -e "${BOLD}${BLUE}NSFW            :${RESET} $nsfw"
    echo -e "${BOLD}${BLUE}Poster Image    :${RESET} $poster"
    echo -e "${BOLD}${BLUE}Cover Image     :${RESET} $cover"
    if test -n "$youtube_url"
    then
        echo -e "${BOLD}${BLUE}Trailer         :${RESET} $youtube_url"
    fi
    echo "────────────────────────────────────────────────────────────"
    echo -e "${BOLD}${BLUE}Synopsis:${RESET}"
    echo "$synopsis"
    echo "────────────────────────────────────────────────────────────"
}



search() {
    echo
    echo -n -e "${BOLD}${BLUE}Search Anime: ${RESET}"
    read -r anime_name
    anime_name=$(echo ${anime_name} | sed -E 's/ /%20/g')
    page_number=1
    all_results=""

    clear
    echo -e "${BOLD}${CYAN}Searching for anime ...${RESET}"

    while true
    do
        anime_search=${anime_base}search?keyword=${anime_name}\&page=${page_number}

        content=$(curl -s ${anime_search} | grep -E 'title' | grep -E 'href' | grep -E "     <h3 class=\"film-name\"><a href=" | sed -E 's/^ *.*title=\"//g' | sed -E 's/\" *class.*$//g')
        
        if [[ -z "$content" ]]; then
            break
        fi
        all_results="${all_results}${content}\n"
        page_number=$((page_number + 1))
    done

    all_results=$(echo -e "$all_results" | sed 's/ *$//g')

    if [[ -z "$all_results" ]]
    then
        echo "No anime found for your search."
        exit 1
    fi

    selected=$(echo -e "$all_results" | fzf --layout=reverse --prompt="Select anime: ")

    if [[ -z "$selected" ]]
    then
        echo "No selection made."
        exit 1
    fi
}

# https://kaido.to/search?keyword=rascal+does+not+dream

anime_base="https://kaido.to/"
MAL_base="https://myanimelist.net/"
CYAN='\033[1;36m'
RESET='\033[0m'
BOLD='\033[1m'
BLACK='\033[30m'
WHITE='\033[37m'
BLUE='\033[34m'
RED='\033[31m'

startup

clear
# ➜  ani-down cat testing.txt | grep -E "senpai" | grep -v "^ *<a" | sed -E 's/^ *.*title=\"//g' | sed -E 's/\" *class.*$//g'
# Seishun Buta Yarou wa Bunny Girl Senpai no Yume wo Minai Picture Drama
# Rascal Does Not Dream of Bunny Girl Senpai


# cat bgs_info_test| grep "name=\"twitter:card\" content=\"summary\"><meta name=\"twitter:site\"" | sed -E 's/^.*<meta property="og:title" content=\"/\nJapanese romaji title = /g;s/\"><meta property=\"og:type\" content=\"video.tv_show\".*og:description\" content=\"/\n\nDescription = /g;s/\">//g'






# IGNORE BELOW THIS

################################################################################################################################################################
################################################################################################################################################################
################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################



